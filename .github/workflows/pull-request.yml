name: Pull Request Workflow

# This workflow runs on pull request events to ensure code quality and test coverage
# Dodatkowy komentarz dla testu git
# Poprawki dla testów E2E w GitHub Actions
on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened ]

jobs:
  # Linting job - verifies code adheres to style guidelines
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc' # Uses Node.js version specified in .nvmrc file
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run linting
        run: npm run lint
  
  # Unit testing job - verifies individual components function correctly
  unit-test:
    name: Unit Tests
    needs: lint # Only runs if linting passes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run unit tests with coverage
        run: npm run test:coverage
      
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7 # Keep coverage reports for 7 days
  
  # E2E testing job - verifies the application works as expected from a user perspective
  e2e-test:
    name: E2E Tests
    needs: lint # Only runs if linting passes
    runs-on: ubuntu-latest
    environment: integration # Use integration environment
    env:
      # Set environment variables from secrets for Supabase integration
      PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
      PUBLIC_SUPABASE_PROJECT_ID: ${{ secrets.PUBLIC_SUPABASE_PROJECT_ID }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Create .env.test file
        run: |
          echo "PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}" > .env.test
          echo "PUBLIC_SUPABASE_KEY=${{ secrets.PUBLIC_SUPABASE_KEY }}" >> .env.test
          echo "PUBLIC_SUPABASE_PROJECT_ID=${{ secrets.PUBLIC_SUPABASE_PROJECT_ID }}" >> .env.test
          echo "E2E_USERNAME=${{ secrets.E2E_USERNAME }}" >> .env.test
          echo "E2E_PASSWORD=${{ secrets.E2E_PASSWORD }}" >> .env.test
          echo "E2E_USERNAME_ID=${{ secrets.E2E_USERNAME_ID }}" >> .env.test
          # Dodaj inne niezbędne zmienne środowiskowe
      
      - name: Debug environment
        run: |
          echo "Checking .env.test file presence:"
          ls -la .env.test || echo ".env.test file not found"
          
          echo "Checking environment variables (sensitive values redacted):"
          echo "PUBLIC_SUPABASE_URL is set: ${{ env.PUBLIC_SUPABASE_URL != '' }}"
          echo "PUBLIC_SUPABASE_KEY is set: ${{ env.PUBLIC_SUPABASE_KEY != '' }}"
          echo "E2E_USERNAME is set: ${{ env.E2E_USERNAME != '' }}"
          echo "E2E_PASSWORD is set: ${{ env.E2E_PASSWORD != '' }}"
      
      - name: Install Playwright browsers
        run: npx playwright install chromium # Only install Chromium browser for tests
      
      - name: Start application server
        run: npm run e2e:dev & 
        # The & at the end runs the server in the background

      - name: Wait for server to start
        run: |
          echo "Waiting for server to start..."
          # Give the server some time to start
          sleep 10
          # Try to connect to the server, retry up to 5 times with a 5-second delay
          for i in {1..5}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Server is up and running!"
              break
            fi
            
            if [ $i -eq 5 ]; then
              echo "Server failed to start after multiple attempts"
              exit 1
            fi
            
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
      
      - name: Run E2E tests
        run: |
          # Najpierw wyświetl listę dostępnych zmiennych env w terminalu (bez wartości wrażliwych)
          echo "Current directory: $(pwd)"
          echo "Listing test files:"
          ls -la e2e/
          
          # Uruchamianie testu z włączonym dodatkowym debugowaniem
          DEBUG=pw:api NODE_OPTIONS="--no-node-snapshot" npm run test:e2e
        
      - name: Upload error logs if tests fail
        if: failure()
        run: |
          echo "Collecting logs from failed tests..."
          # Zbieranie dodatkowych informacji w przypadku niepowodzenia
          ls -la playwright-report/ || echo "No playwright-report directory"
          ls -la e2e/screenshots/ || echo "No screenshots directory"
          
          # Wyświetl zawartość ostatniego zrzutu ekranu, jeśli istnieje
          if [ -d "e2e/screenshots" ]; then
            LAST_SCREENSHOT=$(ls -t e2e/screenshots/ | head -1)
            if [ -n "$LAST_SCREENSHOT" ]; then
              echo "Last screenshot taken: $LAST_SCREENSHOT"
            fi
          fi
      
      - name: Shutdown application server
        if: always() # Run even if tests fail
        run: pkill -f "astro dev" || true # The || true ensures this step doesn't fail if no process is found
      
      - name: Upload Playwright report
        if: always() # Upload report regardless of test result
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
  
  # Status comment job - adds a comment to the PR indicating all checks have passed
  status-comment:
    name: PR Status Comment
    needs: [unit-test, e2e-test] # Only runs if both test jobs pass
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Add PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All checks have passed successfully! This PR is ready for review.'
            }) 