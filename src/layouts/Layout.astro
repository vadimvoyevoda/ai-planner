---
import "@/styles/global.css";
import { Toaster } from "sonner";
import { ViewTransitions } from "astro:transitions";
import Providers from "@/components/providers/Providers";
import { initializeFeatureFlags } from '@/features/featureFlags.init';
import NavbarAuth from "@/components/shared/NavbarAuth.astro";
import { isFeatureEnabled } from '@/features/featureFlags';
import { DEFAULT_USER } from '@/lib/services/defaultAuth';
import { EnvironmentBadge } from "@/components/EnvironmentBadge";

// Inicjalizacja feature flag
if (import.meta.env.SSR) {
  await initializeFeatureFlags();
}

interface Props {
  title: string;
}

const { title } = Astro.props;

// ===== DRASTYCZNIE UPROSZCZONA LOGIKA =====

// 1. Sprawdź, czy auth jest włączone czy wyłączone (wartość flagi)
const authEnabled = isFeatureEnabled("auth");
console.log('[Layout] Wartość flagi auth:', authEnabled);

// 2. Ścieżki uwierzytelniania
const authPaths = ["/auth/login", "/auth/register", "/auth/reset-password", "/auth/new-password"];
const isAuthPath = authPaths.includes(Astro.url.pathname);

// 3. Logika przekierowań
let user = null;
let isDefaultUser = false;

if (authEnabled) {
  // Gdy auth jest WŁĄCZONE:
  // A. Sprawdź sesję użytkownika (tylko jeśli auth jest włączone)
  const supabase = (await import('@/lib/supabase')).createServerSupabase(Astro.cookies);
  const { data: { session }, error } = await supabase.auth.getSession();
  
  console.log('[Layout] Sprawdzanie sesji:', { 
    hasSession: !!session, 
    error: error?.message,
    path: Astro.url.pathname 
  });
  
  // B. Przekieruj na logowanie, jeśli nie ma sesji i nie jesteśmy na stronie auth
  if (!session && !isAuthPath) {
    console.log('[Layout] Przekierowanie na logowanie (auth włączone, brak sesji)');
    return Astro.redirect("/auth/login");
  }
  
  // C. Jeśli mamy sesję, użyj danych użytkownika z sesji
  if (session) {
    user = session.user;
  }
} else {
  // Gdy auth jest WYŁĄCZONE:
  // A. Zawsze używaj domyślnego użytkownika
  user = {
    ...DEFAULT_USER,
    aud: "authenticated",
    created_at: new Date().toISOString(),
  };
  isDefaultUser = true;
  
  console.log('[Layout] Używam domyślnego użytkownika:', DEFAULT_USER.email);
  
  // B. Przekieruj na stronę główną, jeśli jesteśmy na stronie auth
  if (isAuthPath) {
    console.log('[Layout] Przekierowanie na stronę główną (auth wyłączone, strona auth)');
    return Astro.redirect("/");
  }
}

// Wypisz podsumowanie
console.log('[Layout] Podsumowanie:', {
  auth: authEnabled ? 'WŁĄCZONE' : 'WYŁĄCZONE',
  user: user?.email || 'BRAK',
  isDefaultUser,
  path: Astro.url.pathname,
  isAuthPath,
});

// Aktywna ścieżka
const pathname = new URL(Astro.request.url).pathname;

// Lista zakładek nawigacji
const navItems = [
  { name: "Dashboard", href: "/" },
  { name: "Zaplanuj spotkanie", href: "/proposals" },
  { name: "Ustawienia", href: "/settings", requiresAuth: true }
];

// Filtruję elementy nawigacji, które wymagają auth gdy auth jest wyłączone
const filteredNavItems = authEnabled 
  ? navItems 
  : navItems.filter(item => !item.requiresAuth);
---

<!doctype html>
<html lang="pl" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="AI Planner - Twój inteligentny asystent planowania" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title ? `${title} | AI Planner` : "AI Planner"}</title>
    <ViewTransitions />
    <script>
      // Inicjalizacja feature flag po stronie klienta
      import { initializeFeatureFlags } from '@/features/featureFlags.init';
      
      // Wywołaj asynchronicznie bez czekania na wynik
      initializeFeatureFlags().catch(error => {
        console.error('Błąd inicjalizacji flag funkcjonalności:', error);
      });
    </script>
  </head>
  <body class="h-full">
    <Providers client:load>
      <div class="min-h-screen flex flex-col bg-gray-50">
        <Toaster client:load richColors position="top-right" />
        <EnvironmentBadge client:load />
        {
          user && (
            <header class="bg-white border-b border-gray-200 sticky top-0 z-10">
              <div class="container mx-auto px-4 h-16 flex justify-between items-center">
                <div class="flex items-center space-x-4">
                  <a href="/" class="flex items-center space-x-2 group">
                    <img src="/favicon.svg" alt="Logo" class="w-8 h-8 group-hover:scale-105 transition-transform" />
                    <h1 class="text-xl font-semibold text-gray-900 group-hover:text-indigo-600 transition-colors">
                      AI Planner
                    </h1>
                  </a>
                  <nav class="hidden md:flex items-center space-x-1">
                    {filteredNavItems.map((item) => (
                      <a
                        href={item.href}
                        class:list={[
                          "px-3 py-2 rounded-md text-sm font-medium transition-colors",
                          pathname === item.href
                            ? "bg-indigo-50 text-indigo-600"
                            : "text-gray-600 hover:bg-gray-50 hover:text-gray-900",
                        ]}
                      >
                        {item.name}
                      </a>
                    ))}
                  </nav>
                </div>
                <div class="flex items-center space-x-4">
                  <div class="hidden md:flex items-center">
                    {!isDefaultUser && <span class="text-sm text-gray-600 mr-2">{user?.email}</span>}
                    {isDefaultUser && (
                      <span class="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full">
                        Użytkownik Domyślny
                      </span>
                    )}
                  </div>
                  <NavbarAuth isLoggedIn={!!user} />
                </div>
              </div>

              {/* Mobile navigation */}
              <div class="md:hidden border-t border-gray-200">
                <nav class="flex">
                  {filteredNavItems.map((item) => (
                    <a
                      href={item.href}
                      class:list={[
                        "flex-1 px-3 py-2 text-center text-sm font-medium transition-colors",
                        pathname === item.href
                          ? "bg-indigo-50 text-indigo-600"
                          : "text-gray-600 hover:bg-gray-50 hover:text-gray-900",
                      ]}
                    >
                      {item.name}
                    </a>
                  ))}
                </nav>
              </div>
            </header>
          )
        }
        <main class="flex-1 container mx-auto px-4 py-8">
          <slot />
        </main>
        <footer class="bg-white border-t border-gray-200 py-4">
          <div class="container mx-auto px-4 text-center text-sm text-gray-600">
            © {new Date().getFullYear()} AI Planner. Wszystkie prawa zastrzeżone.
          </div>
        </footer>
      </div>
    </Providers>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
