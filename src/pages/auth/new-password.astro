---
import Layout from "@/layouts/Layout.astro";
import NewPasswordForm from "@/components/auth/NewPasswordForm";
import { createServerSupabase } from "@/lib/supabase";
import { isFeatureEnabled } from "@/features/featureFlags";
import { setDefaultUserCookie } from "@/lib/services/cookieAuth";

// Sprawdzenie flagi dla funkcjonalności auth
const authEnabled = isFeatureEnabled("auth");

// Gdy funkcjonalność jest wyłączona, ustaw ciasteczko i przekieruj na stronę główną
// System automatycznie użyje domyślnego użytkownika
if (!authEnabled) {
  console.log("[NewPassword] Auth wyłączone, ustawiam ciasteczko i przekierowuję na stronę główną");
  setDefaultUserCookie(Astro.cookies);
  return Astro.redirect("/?from=new-password");
}

// Get the hash fragment from the URL (contains the token)
const url = Astro.url;
const hasAccessToken = url.hash.includes('access_token') || url.search.includes('access_token');
const hasTypeRecovery = url.hash.includes('type=recovery') || url.search.includes('type=recovery');

// If there's no access token or it's not a recovery type, redirect to login
if (!hasAccessToken || !hasTypeRecovery) {
  console.log("[NewPassword] No recovery token found, redirecting to login");
  return Astro.redirect("/auth/login");
}
---

<Layout title="Nowe hasło | AI Planner">
  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8 h-screen flex items-center justify-center">
      <div class="w-full max-w-md">
        <NewPasswordForm
          client:load
          onSubmit={async (password: string) => {
            const response = await fetch("/api/auth/new-password", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ password }),
            });
            
            const data = await response.json();
            
            if (data.success) {
              alert(data.message);
              window.location.href = data.redirect;
            } else {
              throw new Error(data.error);
            }
          }}
        />
      </div>
    </div>
  </div>
</Layout> 